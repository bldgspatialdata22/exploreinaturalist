---
title: "Data Cleaning"
format: html
editor: visual
---

# Data Cleaning

```{r}
library(dplyr)
library(sf)

# Read data saved to data folder
piedmont_obs <- readr::read_rds(here::here("data/piedmont_obs.rds"))
coastal_obs <- readr::read_rds(here::here("data/coastal_obs.rds"))
biodiv_obs <- readr::read_rds(here::here("data/biodiv_obs.rds"))
maryland_data <- readr::read_rds(here::here("data/maryland_data.rds"))
GBIF_MD_research_grade_FULL <-
  readr::read_tsv("data/GBIF_MD_research_grade.csv")
```

## Check Out Data

### Questions to Consider:

1.  What is the the data structure of each dataset?

2.  What are the column names/variables, and are they consistent between each dataset?

3.  Which variables are important to keep for an exploratory analysis, and are they in useful data formats?

```{r}
# Check out data
# What is the data structure of each dataset?
biodiv_obs
summary(biodiv_obs)
sf::st_crs(biodiv_obs)
# What are the column names?
colnames(biodiv_obs)
# Are they all unique?
# Are they consistent between datasets?
# Which variables are important to keep for further analysis?
```

## Filter Data

After exploring each dataset I have decided to reduce the data frames down to 10 columns:

-   "user.login" or "recordedBy" = iNaturalist username

-   "id" or "gbifID" = unique id number assigned to observation

-   "observed_on" or "eventDate" = date of observation reported by user

    -   note: "observed_on" format (YYYY-MM-DD); "eventDate" format (YYYY

-   "taxon.id" or "speciesKey" = unique id number assigned to a species

-   "taxon.name" or "species" = scientific name (genus + epithet) of species

-   "iconic_taxon.name" or "kingdom" = name of higher classification of species observed

-   "latitude" or "decimalLatitude"

-   "longitude" or "decimalLongitude"

```{r}
# Drop columns
# dplyr::filter()

# Rename column names to be consistent between datasets

# Change column data types

# Drop NA and null values

# Transform from dataframe to spatial dataframe
crs <- st_crs(4269)
```

```{r}
# Prep coastal_obs data
# Convert lat/lon columns to numeric type
coastal_obs$latitude <- as.numeric(as.character(coastal_obs$latitude))
coastal_obs$longitude <- as.numeric(as.character(coastal_obs$longitude))
# Check for NAs in lat/lon columns
costal_na_lat <- which(is.na(coastal_obs$latitude))
coastal_na_lon <- which(is.na(coastal_obs$longitude))
# Both columns return NA values in rows: 1341, 1342, 1344, 1382
# Remove rows in dateframe with NA values
coastal_obs_drop_na <- coastal_obs %>%
  tidyr::drop_na(latitude)
# Convert iNaturalist dataframes into sf objects
coastal_obs_sf <- sf::st_as_sf(coastal_obs_drop_na, coords = c("longitude", "latitude"), crs = crs)
```

```{r}
piedmont_obs$latitude <- as.numeric(as.character(piedmont_obs$latitude))
piedmont_obs$longitude <- as.numeric(as.character(piedmont_obs$longitude))
# Check for NAs in lat/lon columns
piedmont_na_lat <- which(is.na(piedmont_obs$latitude))
piedmont_na_lon <- which(is.na(piedmont_obs$longitude))
# Both columns return NA values in 100 rows
# Remove rows in dateframe with NA values
piedmont_obs_drop_na <- piedmont_obs %>%
  tidyr::drop_na(latitude)
# Convert iNaturalist dataframes into sf objects
piedmont_obs_sf <- sf::st_as_sf(piedmont_obs_drop_na, coords = c("longitude", "latitude"), crs = crs)
```

```{r}
# Repeat aboce steps for biodiv_obs data
# Convert lat/lon columns to numeric type
biodiv_obs$latitude <- as.numeric(as.character(biodiv_obs$latitude))
biodiv_obs$longitude <- as.numeric(as.character(biodiv_obs$longitude))
# Check for NAs in lat/lon columns
biodiversity_na_lat <- which(is.na(biodiv_obs$latitude))
biodiversity_na_lon <- which(is.na(biodiv_obs$longitude))
# Both columns return NA values
# Remove rows in dateframe with NA values
biodiv_obs_drop_na <- biodiv_obs %>%
  tidyr::drop_na(latitude)
# Convert iNaturalist dataframes into sf objects
biodiv_obs_sf <- sf::st_as_sf(biodiv_obs_drop_na, coords = c("longitude", "latitude"), crs = crs)
```

```{r}
# Create new dataframe, filtering out unecessary variables
# Keep variables that will be useful in further analysis
# Coastal
coastal_sm <-
  coastal_obs_sf %>%
  select(all_of(c(
    "id",
    "observed_on",
    "taxon_id",
    "taxon.name",
    "user.login",
    "observation_photos_count",
    "place_guess",
    "quality_grade",
    "captive"
  )))

# Filter dataframe down to research quality observations
coastal_researchgrade <-
  filter(
    coastal_sm, quality_grade == "research",
    captive == "FALSE"
  )
# Piedmont
piedmont_sm <-
  piedmont_obs_sf %>%
  select(all_of(c(
    "id",
    "observed_on",
    "taxon_id",
    "taxon.name",
    "user.login",
    "observation_photos_count",
    "place_guess",
    "quality_grade",
    "captive"
  )))
# Filter dataframe down to research quality observations
piedmont_researchgrade <-
  filter(
    piedmont_sm, quality_grade == "research",
    captive == "FALSE"
  )
# Biodiversity data
biodiv_sm <-
  biodiv_obs_sf %>%
  select(all_of(c(
    "id",
    "observed_on",
    "taxon_id",
    "taxon.name",
    "user.login",
    "observation_photos_count",
    "place_guess",
    "quality_grade",
    "captive"
  )))

# Filter dataframe down to research quality observations
biodiv_researchgrade <-
  filter(
    biodiv_sm, quality_grade == "research",
    captive == "FALSE"
  )
```

```{r}
# Check CRS again
st_crs(coastal_researchgrade)
st_crs(piedmont_researchgrade)
st_crs(biodiv_researchgrade)
```

GBIF Data

```{r}
GBIF_sm <-
  GBIF_MD_research_grade_FULL %>%
  select(all_of(c(
    "gbifID",
    "kingdom",
    "class",
    "species",
    "decimalLatitude",
    "decimalLongitude",
    "eventDate",
    "recordedBy",
    "speciesKey"
  )))

GBIF_sf <- sf::st_as_sf(GBIF_sm, coords = c("decimalLongitude", "decimalLatitude"), crs = crs)
```
