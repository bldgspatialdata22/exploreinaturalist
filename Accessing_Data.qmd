---
title: "Accessing Data"
format: html
editor: visual
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  warnings = FALSE
)
```

## How to Access project data from iNaturalist.org:

Install required packages and libraries for accessing data.

```{r setup, }
# remotes::install_github("ropensci/rinat")
# remotes::install_github("ropensci/rgbif")
library(tidyverse)
library(rinat) # R package to retreive data from iNaturalist database
library(rgbif) # R package to retreive data from GBIF database
library(readr) # R package for reading and writing files locally
library(spData) # R package for importing US states data
```

### Get iNat Project Observations

After testing out certain functions from the rinat package, I decided to use `get_inat_obs_project()` to retrieve data through the iNaturalist API. I chose three citizen science projects within the state of Maryland. iNaturalist allows project administrators to control the level of detail users are required to report in order for an observation to be included in the project dataset. Project admins are also able to privatize their project's data. These three projects varying levels of observation detail, however data are accessible to any public user.

```{r, eval=FALSE}
# Access selected iNaturalist projects' observations using rinat::get_inat_obs_project()
# Assign data unique name
piedmont_obs <- rinat::get_inat_obs_project("maryland-master-naturalist-program-piedmont-region", type = "observations")
# Save data to local folder
readr::write_rds(piedmont_obs, here::here("data/piedmont_obs.rds"))
# Repeat for coastal project
coastal_obs <- rinat::get_inat_obs_project("maryland-master-naturalist-program-coastal-plain", type = "observations")
readr::write_rds(coastal_obs, here::here("data/coastal_obs.rds"))
# Repeat for biodiversity data
biodiv_obs <- rinat::get_inat_obs_project("biodiversity-of-maryland", type = "observations")
readr::write_rds(biodiv_obs, here::here("data/biodiv_obs.rds"))
```

### Perform GBIF Occurrence Search

I also wanted to test out the Global Biodiversity Information Facility's R package rgbif. This organization offers users free, public access to data from a number of sources around the world, including iNaturalist. Their online occurrences search engine allows for fine-tuned filtering of their entire collection.

After using the online search tool, I repeated my exact search using rgbif's `occ_search()` . Although this function is straight-forward, it does require knowledge of the GBIF API's standards for each attribute. For instance, the country attribute will only work using the country's 2-letter country code. Note, this is not true of the online occurrence search tool. rgbif does have a built-in function to cross reference: `rgb_country_codes()` .

Another tricky part of using `occ_search()` is searching by `datasetKey` , which is the unique ID associated with a dataset. There are other attributes you can search by in order to narrow down your search to only include a specific instiution's data, such as `publishingOrg` or `institutionCode` .

Although GBIF's online search tool is more extensive and user-friendly than iNaturalist's observation search tool, and I prefer using the GBIF hub in order to retrieve full datasets, it definitely requires familiarizing yourself with each search parameter.

```{r, eval=FALSE}
# Access iNaturalist data from GBIF using rgbif::occ_search()
#
# Recreate data occurance search done on website with the following filters:
#
# country or area = United States of America
# dataset = iNaturalist Research-grade Observations (50c9509d-22c7-4a22-a47d-8c48425ef4a7)
# has coordinate = true
# has geospatial issue = false
# occurance statis = present
# state province = Maryland
#
# Confirm 2-letter country code for United States
rgbif::rgb_country_codes(country_name = "United", fuzzy = FALSE)

GBIF_MD_research_grade <-
  rgbif::occ_search(
    taxonKey = NULL,
    scientificName = NULL,
    country = "US",
    datasetKey = "50c9509d-22c7-4a22-a47d-8c48425ef4a7",
    hasCoordinate = TRUE,
    hasGeospatialIssue = FALSE,
    occurrenceStatus = "present",
    stateProvince = "Maryland"
  )
# Save data from search locally
readr::write_rds(GBIF_MD_research_grade, here::here("data/GBIF_MD_research_grade.rds"))
# Another example using occ_search
# This search includes the "year" parameter, where year is set to "2022"
GBIF_MD_research_grade_2022 <-
  rgbif::occ_search(
    taxonKey = NULL,
    scientificName = NULL,
    country = "US",
    datasetKey = "50c9509d-22c7-4a22-a47d-8c48425ef4a7",
    hasCoordinate = TRUE,
    hasGeospatialIssue = FALSE,
    occurrenceStatus = "present",
    stateProvince = "Maryland",
    year = "2022"
  )
```

### Read in GBIF tsv file

An alternative to using `occ_search()` or another rgbif function in order to pull data into R directly from GBIF is to [request a download](https://www.gbif.org/occurrence/download) after performing an occurrence search on the website. This also allows you to get around the 10,000 occurrence download limitation of the GBIF Occurrence API. You'll have to wait for GBIF to fulfill your download request, and the request will take longer for larger datasets, however the turnaround is usually 24 hours or less and your download is retrievable for six-months.

```{r, eval=FALSE}
# Data can also be accessed from GBIF via downloading tsv files.
# The former method offers a glimpse at the dataset
# whereas downloading the csv provides the dataset in its entireity.
# NOTE: All GBIF data is in simple tab-separated values(TSV) format
#
# Read in GBIF data from csv using read_tsv()
GBIF_MD_research_grade_FULL <-
  readr::read_tsv("data/GBIF_MD_research_grade.csv")
```
